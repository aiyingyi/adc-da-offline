package com.adc.da.util;

import com.adc.da.udf.ChargeVolDiffExpUdf;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class HiveUtils {

    // 将List转换成array
    public static double[] listToArray(List<Double> list) {

        double arr[] = new double[list.size()];
        for (int i = 0; i < list.size(); i++) {
            arr[i] = list.get(i).doubleValue();
        }
        return arr;
    }

    /**
     * 将字符串解析成二维的double数组
     *
     * @param cellVol
     * @return
     */
    public static double[][] parseVol(ArrayList<String> cellVol) {

        // 获取单体个数
        int cellNum = cellVol.get(0).substring(1, cellVol.get(0).length() - 1).split(",").length;
        double[][] vols = new double[cellVol.size()][cellNum];

        // 将字符串解析成数组
        for (int i = 0; i < cellVol.size(); i++) {
            String[] strs = cellVol.get(i).substring(1, cellVol.get(i).length() - 1).split(",");
            double[] voltage = new double[strs.length];

            for (int j = 0; j < strs.length; j++) {
                voltage[j] = Double.parseDouble(strs[j]);
            }
            vols[i] = voltage;
        }
        return vols;
    }

    public static void main(String[] args) {
        ArrayList<String> cellVol = new ArrayList<>();
        cellVol.add("[3.583,3.582,3.581,3.58,3.573,3.582,3.578,3.583,3.573,3.581,3.582,3.582,3.589,3.589,3.588,3.588,3.582,3.586,3.587,3.587,3.585,3.589,3.589,3.59,3.583,3.586,3.586,3.584,3.585,3.584,3.585,3.586,3.582,3.585,3.585,3.585,3.583,3.584,3.583,3.585,3.579,3.585,3.584,3.585,3.575,3.581,3.581,3.581,3.581,3.581,3.581,3.583,3.576,3.581,3.581,3.582,3.566,3.576,3.578,3.58,3.566,3.564,3.564,3.566,3.565,3.573,3.576,3.577,3.571,3.577,3.574,3.575,3.595,3.593,3.598,3.593,3.594,3.595,3.593,3.595,3.597,3.595,3.594,3.596,3.594,3.596,3.596,3.595,3.6,3.595,3.596,3.594,3.573,3.58,3.58,3.581]");
        cellVol.add("[3.607,3.606,3.605,3.605,3.61,3.606,3.602,3.606,3.612,3.607,3.607,3.606,3.589,3.589,3.588,3.588,3.605,3.604,3.603,3.603,3.585,3.589,3.589,3.59,3.579,3.58,3.58,3.578,3.577,3.578,3.578,3.581,3.572,3.578,3.579,3.579,3.576,3.577,3.577,3.579,3.539,3.564,3.563,3.564,3.55,3.564,3.564,3.565,3.565,3.565,3.564,3.567,3.551,3.565,3.564,3.565,3.561,3.573,3.574,3.576,3.566,3.564,3.564,3.566,3.565,3.573,3.576,3.577,3.571,3.577,3.574,3.575,3.562,3.554,3.558,3.556,3.588,3.591,3.59,3.591,3.532,3.555,3.554,3.557,3.558,3.556,3.558,3.557,3.526,3.556,3.556,3.557,3.531,3.553,3.552,3.554]");
        cellVol.add("[3.598,3.599,3.598,3.597,3.596,3.599,3.594,3.599,3.598,3.598,3.598,3.598,3.589,3.589,3.588,3.588,3.598,3.601,3.6,3.599,3.585,3.589,3.589,3.59,3.596,3.6,3.599,3.598,3.6,3.598,3.599,3.6,3.598,3.598,3.599,3.598,3.588,3.59,3.589,3.592,3.584,3.592,3.591,3.592,3.587,3.591,3.591,3.591,3.591,3.591,3.591,3.592,3.588,3.592,3.591,3.592,3.585,3.59,3.59,3.592,3.591,3.592,3.592,3.592,3.588,3.59,3.592,3.592,3.59,3.593,3.591,3.591,3.592,3.589,3.592,3.589,3.588,3.591,3.59,3.591,3.586,3.591,3.59,3.591,3.591,3.592,3.593,3.591,3.587,3.592,3.592,3.591,3.596,3.597,3.597,3.598]");
        cellVol.add("[3.584,3.583,3.581,3.581,3.581,3.586,3.582,3.586,3.58,3.585,3.586,3.585,3.589,3.589,3.588,3.588,3.586,3.59,3.59,3.588,3.585,3.589,3.589,3.59,3.586,3.587,3.588,3.586,3.588,3.586,3.587,3.588,3.584,3.588,3.587,3.587,3.585,3.586,3.585,3.588,3.582,3.588,3.586,3.587,3.584,3.586,3.587,3.587,3.586,3.588,3.588,3.589,3.585,3.589,3.587,3.587,3.566,3.576,3.578,3.58,3.566,3.564,3.564,3.566,3.565,3.573,3.576,3.577,3.571,3.577,3.574,3.575,3.595,3.593,3.598,3.593,3.573,3.578,3.576,3.578,3.568,3.577,3.577,3.578,3.578,3.58,3.58,3.578,3.579,3.586,3.585,3.584,3.58,3.583,3.584,3.584]");

    }
}
